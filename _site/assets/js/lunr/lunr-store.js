var store = [{
        "title": "Deep Analysis of Mars Stealer",
        "excerpt":"Introduction   Mars Stealer is an improved copy of Oski Stealer. I saw alot of tweets recently about it so i decided to write an analysis of the newer version V8. Enjoy reading!     Diffrences from the previous version:            Anti analysis technique       Diffrent encryption algoithm       Introudcing new anti debug technique       New configuration format       External dlls are in one zip file           Overview        Anti-Analysis   Opening mars stealer in ida we can see an  anti-analysis trick called Opaque Predicates it’s a commonly used technique in program obfuscation, intended to add complexity to the control flow.   This obfuscation simply takes an absolute jump (JMP) and transforms it into two conditional jumps (JZ/JNZ). Depending on the value of the Zero flag (ZF), the execution will follow the first or second branch.   However, disassemblers are tricked into thinking that there is a fall-through branch if the second jump is not taken (which is impossible as one of them must be taken) and tries to disassemble the unreachable instructions (often invalid) resulting in garbage code.         the deobfuscation is simple, we just need to patch the first conditional jump to an absolute jump and nop out the second jump, we can use IDAPython to achieve this:   import idc  ea = 0 while True:     ea =  min(ida_search.find_binary(ea,idc.BADADDR, \"74 ? 75 ?\",16 ,idc.SEARCH_NEXT | idc.SEARCH_DOWN),  # JZ / JNZ     ida_search.find_binary(ea,idc.BADADDR, \"75 ? 74 ?\",16, idc.SEARCH_NEXT | idc.SEARCH_DOWN))  # JNZ / JZ     if ea == idc.BADADDR:         break     idc.patch_byte(ea, 0xEB)     idc.patch_byte(ea+2, 0x90)     idc.patch_byte(ea+3, 0x90)     idc.patch_byte(ea+4, 0x90)         After Running the Script    now we can see a clear view , after reversing and renaming                                    First Mars get a handle to kernel32.dll by parsing InLoadOrderModuleList then it passes the handle to a fucntion that  loops over the exported functions of the DLL to get the address of the LocalAlloc() and VirtualProtect() functions.        String Encryption  After that it decrypts some strings used for some checks , the decryption is a simple xor function               We can although see that the xor function is refrenced in another function which i renamed as Decrypt_String_2 if the malware passes the checks which we will see soon it decrypt those string which contanis strings needed for the malware to steal sensitive data .         We use idapython script to get those strings and rename the variables to make reversing easier         import string  def sanitize_string(name):         return \"\".join([c for c in name if c in string.ascii_letters])[:20].capitalize()  def X0r(key, data, length):     res = \"\"     for i in range(length):         res += chr(key[i] ^ data[i])     return res   start_Addrs = [0x00401770,0x00401990  ] end_Addrs = [0x00401967,0x0405444 ]  string_list = [] dectypred_data = b'' addrs = []  for i in range(len(start_Addrs)):     ea = start_Addrs[i]     end = end_Addrs[i]      while ea &lt;= end:         if idc.get_operand_type(ea, 0) == idc.o_imm:             addrs.append((idc.get_operand_value(ea, 0)))          if len(addrs) == 3:             length = addrs[0]             data = idc.get_bytes(addrs[1], length)             key = idc.get_bytes(addrs[2], length)             dectypred_data = X0r(key, data, length)             string_list.append(dectypred_data)             addrs = []          if idc.print_insn_mnem(ea) == \"call\":             idc.set_cmt(ea, dectypred_data, 1)          if idc.print_insn_mnem(ea) == \"mov\" and (idc.get_operand_type(ea, 0) == idc.o_mem) and (                 idc.get_operand_type(ea, 1) == idc.o_reg):             global_var = idc.get_operand_value(ea, 0)             idc.set_name(global_var, \"Str\" + sanitize_string(dectypred_data), SN_NOWARN)          ea = idc.next_head(ea, end)     Here is a list of the decrypted strings :                              Expand to see more            &emsp; LoadLibraryA  &emsp; GetProcAddress  &emsp; ExitProcess  &emsp; advapi32.dll  &emsp; crypt32.dll  &emsp; GetTickCount  &emsp; Sleep  &emsp; GetUserDefaultLangID  &emsp; CreateMutexA  &emsp; GetLastError   &emsp; HeapAlloc  &emsp; GetProcessHeap  &emsp; GetComputerNameA  &emsp; VirtualProtect  &emsp; GetCurrentProcess  &emsp; VirtualAllocExNuma  &emsp; GetUserNameA  &emsp; CryptStringToBinaryA  &emsp; HAL9TH  &emsp; JohnDoe  &emsp; ­6Ê§È/2022 20:00:00  &emsp; http://  &emsp; 194.87.218.39  &emsp; 92550737836278980100  &emsp; /RyC66VfSGP.php  &emsp; Default  &emsp; %hu/%hu/%hu %hu:%hu:%hu  &emsp; open  &emsp; sqlite3.dll  &emsp; C:\\ProgramData\\sqlite3.dll  &emsp; freebl3.dll  &emsp; C:\\ProgramData\\freebl3.dll  &emsp; mozglue.dll  &emsp; C:\\ProgramData\\mozglue.dll  &emsp; msvcp140.dll  &emsp; C:\\ProgramData\\msvcp140.dll  &emsp; nss3.dll  &emsp; C:\\ProgramData\\nss3.dll  &emsp; softokn3.dll  &emsp; C:\\ProgramData\\softokn3.dll  &emsp; vcruntime140.dll  &emsp; C:\\ProgramData\\vcruntime140.dll  &emsp; .zip  &emsp; Tag:   &emsp; IP: IP?  &emsp; Country: Country?  &emsp; Working Path:   &emsp; Local Time:   &emsp; TimeZone:   &emsp; Display Language:   &emsp; Keyboard Languages:   &emsp; Is Laptop:   &emsp; Processor:   &emsp; Installed RAM:   &emsp; OS:   &emsp;  (  &emsp;  Bit)  &emsp; Videocard:   &emsp; Display Resolution:   &emsp; PC name:   &emsp; User name:   &emsp; Domain name:   &emsp; MachineID:   &emsp; GUID:   &emsp; Installed Software:   &emsp; system.txt  &emsp; Grabber\\%s.zip  &emsp; %APPDATA%  &emsp; %LOCALAPPDATA%  &emsp; %USERPROFILE%  &emsp; %DESKTOP%  &emsp; Wallets\\  &emsp; Ethereum  &emsp; \\Ethereum\\  &emsp; keystore  &emsp; Electrum  &emsp; \\Electrum\\wallets\\  &emsp; *.*  &emsp; ElectrumLTC  &emsp; \\Electrum-LTC\\wallets\\  &emsp; Exodus  &emsp; \\Exodus\\  &emsp; exodus.conf.json  &emsp; window-state.json  &emsp; \\Exodus\\exodus.wallet\\  &emsp; passphrase.json  &emsp; seed.seco  &emsp; info.seco  &emsp; ElectronCash  &emsp; \\ElectronCash\\wallets\\  &emsp; default_wallet  &emsp; MultiDoge  &emsp; \\MultiDoge\\  &emsp; multidoge.wallet  &emsp; JAXX  &emsp; \\jaxx\\Local Storage\\  &emsp; file__0.localstorage  &emsp; Atomic  &emsp; \\atomic\\Local Storage\\leveldb\\  &emsp; 000003.log  &emsp; CURRENT  &emsp; LOCK  &emsp; LOG  &emsp; MANIFEST-000001  &emsp; 0000*  &emsp; Binance  &emsp; \\Binance\\  &emsp; app-store.json  &emsp; Coinomi  &emsp; \\Coinomi\\Coinomi\\wallets\\  &emsp; *.wallet  &emsp; *.config  &emsp; *wallet*.dat  &emsp; GetSystemTime  &emsp; lstrcatA  &emsp; SystemTimeToFileTime  &emsp; ntdll.dll  &emsp; sscanf  &emsp; memset  &emsp; memcpy  &emsp; wininet.dll  &emsp; user32.dll  &emsp; gdi32.dll  &emsp; netapi32.dll  &emsp; psapi.dll  &emsp; bcrypt.dll  &emsp; vaultcli.dll  &emsp; shlwapi.dll  &emsp; shell32.dll  &emsp; gdiplus.dll  &emsp; ole32.dll  &emsp; dbghelp.dll  &emsp; CreateFileA  &emsp; WriteFile  &emsp; CloseHandle  &emsp; GetFileSize  &emsp; lstrlenA  &emsp; LocalAlloc  &emsp; GlobalFree  &emsp; ReadFile  &emsp; OpenProcess  &emsp; SetFilePointer  &emsp; SetEndOfFile  &emsp; GetCurrentProcessId  &emsp; GetLocalTime  &emsp; GetTimeZoneInformation  &emsp; GetUserDefaultLocaleName  &emsp; LocalFree  &emsp; GetSystemPowerStatus  &emsp; GetSystemInfo  &emsp; GlobalMemoryStatusEx  &emsp; IsWow64Process  &emsp; GetTempPathA  &emsp; GetLocaleInfoA  &emsp; GetFileSizeEx  &emsp; GetFileAttributesA  &emsp; FindFirstFileA  &emsp; FindNextFileA  &emsp; FindClose  &emsp; GetCurrentDirectoryA  &emsp; CopyFileA  &emsp; DeleteFileA  &emsp; lstrcmpW  &emsp; GlobalAlloc  &emsp; FreeLibrary  &emsp; SetCurrentDirectoryA  &emsp; CreateFileMappingA  &emsp; MapViewOfFile  &emsp; UnmapViewOfFile  &emsp; FileTimeToSystemTime  &emsp; GetFileInformationByHandle  &emsp; GlobalLock  &emsp; GlobalSize  &emsp; WideCharToMultiByte  &emsp; GetWindowsDirectoryA  &emsp; GetVolumeInformationA  &emsp; GetVersionExA  &emsp; GetModuleFileNameA  &emsp; CreateFileW  &emsp; CreateFileMappingW  &emsp; MultiByteToWideChar  &emsp; CreateThread  &emsp; GetEnvironmentVariableA  &emsp; SetEnvironmentVariableA  &emsp; lstrcpyA  &emsp; lstrcpynA  &emsp; InternetOpenA  &emsp; InternetConnectA  &emsp; HttpOpenRequestA  &emsp; HttpSendRequestA  &emsp; HttpQueryInfoA  &emsp; InternetCloseHandle  &emsp; InternetReadFile  &emsp; InternetSetOptionA  &emsp; InternetOpenUrlA  &emsp; InternetCrackUrlA  &emsp; wsprintfA  &emsp; CharToOemW  &emsp; GetKeyboardLayoutList  &emsp; EnumDisplayDevicesA  &emsp; ReleaseDC  &emsp; GetDC  &emsp; GetSystemMetrics  &emsp; GetDesktopWindow  &emsp; GetWindowRect  &emsp; GetWindowDC  &emsp; CloseWindow  &emsp; RegOpenKeyExA  &emsp; RegQueryValueExA  &emsp; RegCloseKey  &emsp; GetCurrentHwProfileA  &emsp; RegEnumKeyExA  &emsp; RegGetValueA  &emsp; CreateDCA  &emsp; GetDeviceCaps  &emsp; CreateCompatibleDC  &emsp; CreateCompatibleBitmap  &emsp; SelectObject  &emsp; BitBlt  &emsp; DeleteObject  &emsp; StretchBlt  &emsp; GetObjectW  &emsp; GetDIBits  &emsp; SaveDC  &emsp; CreateDIBSection  &emsp; DeleteDC  &emsp; RestoreDC  &emsp; DsRoleGetPrimaryDomainInformation  &emsp; GetModuleFileNameExA  &emsp; CryptUnprotectData  &emsp; BCryptCloseAlgorithmProvider  &emsp; BCryptDestroyKey  &emsp; BCryptOpenAlgorithmProvider  &emsp; BCryptSetProperty  &emsp; BCryptGenerateSymmetricKey  &emsp; BCryptDecrypt  &emsp; VaultOpenVault  &emsp; VaultCloseVault  &emsp; VaultEnumerateItems  &emsp; VaultGetItemWin8  &emsp; VaultGetItemWin7  &emsp; VaultFree  &emsp; StrCmpCA  &emsp; StrStrA  &emsp; PathMatchSpecA  &emsp; SHGetFolderPathA  &emsp; ShellExecuteExA  &emsp; GdipGetImageEncodersSize  &emsp; GdipGetImageEncoders  &emsp; GdipCreateBitmapFromHBITMAP  &emsp; GdiplusStartup  &emsp; GdiplusShutdown  &emsp; GdipSaveImageToStream  &emsp; GdipDisposeImage  &emsp; GdipFree  &emsp; CreateStreamOnHGlobal  &emsp; GetHGlobalFromStream  &emsp; SymMatchString  &emsp; HEAD  &emsp; HTTP/1.1  &emsp; GET  &emsp; POST  &emsp; file  &emsp; Content-Type: multipart/form-data; boundary=----  &emsp; Content-Disposition: form-data; name=\"  &emsp; Content-Disposition: form-data; name=\"file\"; filename=\"  &emsp; Content-Type: application/octet-stream  &emsp; Content-Transfer-Encoding: binary  &emsp; SOFT:   &emsp; PROF: ?  &emsp; PROF:   &emsp; HOST:   &emsp; USER:   &emsp; PASS:   &emsp; sqlite3_open  &emsp; sqlite3_prepare_v2  &emsp; sqlite3_step  &emsp; sqlite3_column_text  &emsp; sqlite3_finalize  &emsp; sqlite3_close  &emsp; sqlite3_column_bytes  &emsp; sqlite3_column_blob  &emsp; encrypted_key  &emsp; \"}  &emsp; PATH  &emsp; PATH=  &emsp; NSS_Init  &emsp; NSS_Shutdown  &emsp; PK11_GetInternalKeySlot  &emsp; PK11_FreeSlot  &emsp; PK11_Authenticate  &emsp; PK11SDR_Decrypt  &emsp; SELECT origin_url, username_value, password_value FROM logins  &emsp; Cookies\\%s_%s.txt  &emsp; SELECT HOST_KEY , is_httponly , path , is_secure , (expires_utc/1000000)-11644480800 , name , encrypted_value from cookies  &emsp; TRUE  &emsp; FALSE  &emsp; Autofill\\%s_%s.txt  &emsp; SELECT name, value FROM autofill  &emsp; CC\\%s_%s.txt  &emsp; SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards  &emsp; Card number:   &emsp;  Name on card:   &emsp;  Expiration date:   &emsp; History\\%s_%s.txt  &emsp; SELECT url FROM urls  &emsp; Downloads\\%s_%s.txt  &emsp; SELECT target_path, tab_url from downloads  &emsp; Login Data  &emsp; Cookies  &emsp; Web Data  &emsp; History  &emsp; SELECT host, isHttpOnly, path, isSecure, expiry, name, value FROM moz_cookies  &emsp; logins.json  &emsp; formSubmitURL  &emsp; usernameField  &emsp; encryptedUsername  &emsp; encryptedPassword  &emsp; guid  &emsp; SELECT fieldname, value FROM moz_formhistory  &emsp; SELECT url FROM moz_places  &emsp; cookies.sqlite  &emsp; formhistory.sqlite  &emsp; places.sqlite  &emsp; \\Local State  &emsp; ..\\profiles.ini  &emsp; C:\\ProgramData\\  &emsp; Chrome  &emsp; \\Google\\Chrome\\User Data  &emsp; ChromeBeta  &emsp; \\Google\\Chrome Beta\\User Data  &emsp; ChromeCanary  &emsp; \\Google\\Chrome SxS\\User Data  &emsp; Chromium  &emsp; \\Chromium\\User Data  &emsp; Edge_Chromium  &emsp; \\Microsoft\\Edge\\User Data  &emsp; Kometa  &emsp; \\Kometa\\User Data  &emsp; Amigo  &emsp; \\Amigo\\User Data  &emsp; Torch  &emsp; \\Torch\\User Data  &emsp; Orbitum  &emsp; \\Orbitum\\User Data  &emsp; Comodo  &emsp; \\Comodo\\Dragon\\User Data  &emsp; Nichrome  &emsp; \\Nichrome\\User Data  &emsp; Maxthon5  &emsp; \\Maxthon5\\Users  &emsp; Sputnik  &emsp; \\Sputnik\\User Data  &emsp; EPB  &emsp; \\Epic Privacy Browser\\User Data  &emsp; Vivaldi  &emsp; \\Vivaldi\\User Data  &emsp; CocCoc  &emsp; \\CocCoc\\Browser\\User Data  &emsp; Uran  &emsp; \\uCozMedia\\Uran\\User Data  &emsp; QIP  &emsp; \\QIP Surf\\User Data  &emsp; Cent  &emsp; \\CentBrowser\\User Data  &emsp; Elements  &emsp; \\Elements Browser\\User Data  &emsp; TorBro  &emsp; \\TorBro\\Profile  &emsp; CryptoTab  &emsp; \\CryptoTab Browser\\User Data  &emsp; Brave  &emsp; \\BraveSoftware\\Brave-Browser\\User Data  &emsp; Opera  &emsp; \\Opera Software\\Opera Stable\\  &emsp; OperaGX  &emsp; \\Opera Software\\Opera GX Stable\\  &emsp; OperaNeon  &emsp; \\Opera Software\\Opera Neon\\User Data  &emsp; Firefox  &emsp; \\Mozilla\\Firefox\\Profiles\\  &emsp; SlimBrowser  &emsp; \\FlashPeak\\SlimBrowser\\Profiles\\  &emsp; PaleMoon  &emsp; \\Moonchild Productions\\Pale Moon\\Profiles\\  &emsp; Waterfox  &emsp; \\Waterfox\\Profiles\\  &emsp; Cyberfox  &emsp; \\8pecxstudios\\Cyberfox\\Profiles\\  &emsp; BlackHawk  &emsp; \\NETGATE Technologies\\BlackHawk\\Profiles\\  &emsp; IceCat  &emsp; \\Mozilla\\icecat\\Profiles\\  &emsp; KMeleon  &emsp; \\K-Meleon\\  &emsp; Thunderbird  &emsp; \\Thunderbird\\Profiles\\  &emsp; passwords.txt  &emsp; ibnejdfjmmkpcnlpebklmnkoeoihofec  &emsp; TronLink  &emsp; nkbihfbeogaeaoehlefnkodbefgpgknn  &emsp; MetaMask  &emsp; fhbohimaelbohpjbbldcngcnapndodjp  &emsp; Binance Chain Wallet  &emsp; ffnbelfdoeiohenkjibnmadjiehjhajb  &emsp; Yoroi  &emsp; jbdaocneiiinmjbjlgalhcelgbejmnid  &emsp; Nifty Wallet  &emsp; afbcbjpbpfadlkmhmclhkeeodmamcflc  &emsp; Math Wallet  &emsp; hnfanknocfeofbddgcijnmhnfnkdnaad  &emsp; Coinbase Wallet  &emsp; hpglfhgfnhbgpjdenjgmdgoeiappafln  &emsp; Guarda  &emsp; blnieiiffboillknjnepogjhkgnoapac  &emsp; EQUAL Wallet  &emsp; cjelfplplebdjjenllpjcblmjkfcffne  &emsp; Jaxx Liberty  &emsp; fihkakfobkmkjojpchpfgcmhfjnmnfpi  &emsp; BitApp Wallet  &emsp; kncchdigobghenbbaddojjnnaogfppfj  &emsp; iWallet  &emsp; amkmjjmmflddogmhpjloimipbofnfjih  &emsp; Wombat  &emsp; nlbmnnijcnlegkjjpcfjclmcfggfefdm  &emsp; MEW CX  &emsp; nanjmdknhkinifnkgdcggcfnhdaammmj  &emsp; GuildWallet  &emsp; nkddgncdjgjfcddamfgcmfnlhccnimig  &emsp; Saturn Wallet  &emsp; fnjhmkhhmkbjkkabndcnnogagogbneec  &emsp; Ronin Wallet  &emsp; cphhlgmgameodnhkjdmkpanlelnlohao  &emsp; NeoLine  &emsp; nhnkbkgjikgcigadomkphalanndcapjk  &emsp; Clover Wallet  &emsp; kpfopkelmapcoipemfendmdcghnegimn  &emsp; Liquality Wallet  &emsp; aiifbnbfobpmeekipheeijimdpnlpgpp  &emsp; Terra Station  &emsp; dmkamcknogkgcdfhhbddcghachkejeap  &emsp; Keplr  &emsp; fhmfendgdocmcbmfikdcogofphimnkno  &emsp; Sollet  &emsp; cnmamaachppnkjgnildpdmkaakejnhae  &emsp; Auro Wallet  &emsp; jojhfeoedkpkglbfimdfabpdfjaoolaf  &emsp; Polymesh Wallet  &emsp; flpiciilemghbmfalicajoolhkkenfel  &emsp; ICONex  &emsp; nknhiehlklippafakaeklbeglecifhad  &emsp; Nabox Wallet  &emsp; hcflpincpppdclinealmandijcmnkbgn  &emsp; KHC  &emsp; ookjlbkiijinhpmnjffcofjonbfbgaoc  &emsp; Temple  &emsp; mnfifefkajgofkcjkemidiaecocnkjeh  &emsp; TezBox  &emsp; dkdedlpgdmmkkfjabffeganieamfklkm  &emsp; Cyano Wallet  &emsp; nlgbhdfgdhgbiamfdfmbikcdghidoadd  &emsp; Byone  &emsp; infeboajgfhgbjpjbeppbkgnabfdkdaf  &emsp; OneKey  &emsp; cihmoadaighcejopammfbmddcmdekcje  &emsp; LeafWallet  &emsp; lodccjjbdhfakaekdiahmedfbieldgik  &emsp; DAppPlay  &emsp; ijmpgkjfkbfhoebgogflfebnmejmfbml  &emsp; BitClip  &emsp; lkcjlnjfpbikmcmbachjpdbijejflpcm  &emsp; Steem Keychain  &emsp; onofpnbbkehpmmoabgpcpmigafmmnjhl  &emsp; Nash Extension  &emsp; bcopgchhojmggmffilplmbdicgaihlkp  &emsp; Hycon Lite Client  &emsp; klnaejjgbibmhlephnhpmaofohgkpgkd  &emsp; ZilPay  &emsp; aeachknmefphepccionboohckonoeemg  &emsp; Coin98 Wallet  &emsp; bfnaelmomeimhlpmgjnjophhpkkoljpa  &emsp; Phantom  &emsp; hifafgmccdpekplomjjkcfgodnhcellj  &emsp; Crypto.com  &emsp; dngmlblcodfobpdpecaadgfbcggfjfnm  &emsp; Maiar DeFi Wallet  &emsp; ppdadbejkmjnefldpcdjhnkpbjkikoip  &emsp; Oasis  &emsp; hpbgcgmiemanfelegbndmhieiigkackl  &emsp; MonstaWallet  &emsp; fcckkdbjnoikooededlapcalpionmalo  &emsp; MOBOX  &emsp; jccapkebeeiajkkdemacblkjhhhboiek  &emsp; Crust Wallet  &emsp; mgffkfbidihjpoaomajlbgchddlicgpn  &emsp; Pali Wallet  &emsp; nphplpgoakhhjchkkhmiggakijnkhfnd  &emsp; TON Wallet  &emsp; ldinpeekobnhjjdofggfgjlcehhmanlj  &emsp; Hiro Wallet  &emsp; pocmplpaccanhmnllbbkpgfliimjljgo  &emsp; Slope Wallet  &emsp; bhhhlbepdkbapadjdnnojkbgioiodbic  &emsp; Solflare Wallet  &emsp; pgiaagfkgcbnmiiolekcfmljdagdhlcm  &emsp; Stargazer Wallet  &emsp; cgeeodpfagjceefieflmdfphplkenlfk  &emsp; EVER Wallet  &emsp; gjkdbeaiifkpoencioahhcilildpjhgh  &emsp; partisia-wallet  &emsp; bgjogpoidejdemgoochpnkmdjpocgkha  &emsp; Ecto Wallet  &emsp; ifckdpamphokdglkkdomedpdegcjhjdp  &emsp; ONTO Wallet  &emsp; agechnindjilpccclelhlbjphbgnobpf  &emsp; Fractal Wallet  &emsp; algblmhagnobbnmakepomicmfljlbehg  &emsp; ADS Wallet  &emsp; imijjbmbnebfnbmonjeileijahaipglj  &emsp; Moonlet Wallet  &emsp; kpjdchaapjheajadlaakiiigcbhoppda  &emsp; ZEBEDEE  &emsp; dlcobpjiigpikoobohmabehhmhfoodbb  &emsp; Argent X StarkNet Wallet  &emsp; bofddndhbegljegmpmnlbhcejofmjgbn  &emsp; X-Wallet  &emsp; mapbhaebnddapnmifbbkgeedkeplgjmf  &emsp; Biport Wallet  &emsp; kfdniefadaanbjodldohaedphafoffoh  &emsp; Typhon Wallet  &emsp; jaooiolkmfcmloonphpiiogkfckgciom  &emsp; Twetch Wallet  &emsp; aijcbedoijmgnlmjeegjaglmepbmpkpi  &emsp; Leap Wallet  &emsp; fhfffofbcgbjjojdnpcfompojdjjhdim  &emsp; Lamden Wallet  &emsp; agkfnefiabmfpanochlcakggnkdfmmjd  &emsp; Earth Wallet  &emsp; lpfcbjknijpeeillifnkikgncikgfhdo  &emsp; Nami  &emsp; fecfflganphcinpahcklgahckeohalog  &emsp; Coin Wallet  &emsp; ilhaljfiglknggcoegeknjghdgampffk  &emsp; Beam Web Wallet  &emsp; dklmlehijiaepdijfnbbhncfpcoeeljf  &emsp; FShares Wallet  &emsp; fkhebcilafocjhnlcngogekljmllgdhd  &emsp; WAGMIswap.io Wallet  &emsp; laphpbhjhhgigmjoflgcchgodbbclahk  &emsp; BLUE - Worlds Safest and Simplest Wallet  &emsp; mkjjflkhdddfjhonakofipfojoepfndk  &emsp; Unification Web Wallet  &emsp; jnldfbidonfeldmalbflbmlebbipcnle  &emsp; Infinity Wallet  &emsp; ellkdbaphhldpeajbepobaecooaoafpg  &emsp; Fetch.ai Network Wallet  &emsp; iokeahhehimjnekafflcihljlcjccdbe  &emsp; Alby Wallet  &emsp; omajpeaffjgmlpmhbfdjepdejoemifpe  &emsp; xBull Wallet  &emsp; pgojdfajgcjjpjnbpfaelnpnjocakldb  &emsp; Sugarchain Wallet  &emsp; pnndplcbkakcplkjnolgbkdgjikjednm  &emsp; Tronium  &emsp; fnnegphlobjdpkhecapkijjdkgcjhkib  &emsp; Harmony  &emsp; fhilaheimglignddkjgofkcbgekhenbh  &emsp; Oxygen  &emsp; cmbagcoinhmacpcgmbiniijboejgiahi  &emsp; JustLiquidity Wallet  &emsp; kmmolakhbgdlpkjkcjkebenjheonagdm  &emsp; AlgoSigner  &emsp; fnabdmcgpkkjjegokfcnfbpneacddpfh  &emsp; Goldmint Lite Wallet  &emsp; bgpipimickeadkjlklgciifhnalhdjhe  &emsp; GeroWallet  &emsp; hoighigmnhgkkdaenafgnefkcmipfjon  &emsp; EO.Finance  &emsp; nlgnepoeokdfodgjkjiblkadkjbdfmgd  &emsp; Multi Wallet  &emsp; nhihjlnjgibefgjhobhcphmnckoogdea  &emsp; Waves Enterprise Wallet  &emsp; ehibhohmlpipbaogcknmpmiibbllplph  &emsp; Bluehelix Wallet  &emsp; magbanejlegnbcppjljfhnmfmghialkl  &emsp; Nebulas Wallet  &emsp; fgkaeeikaoeiiggggbgdcjchmdfmamla  &emsp; Vtimes  &emsp; pnlfjmlcjdjgkddecgincndfgegkecke  &emsp; Crocobit Wallet  &emsp; bhghoamapcdpbohphigoooaddinpkbai  &emsp; Authenticator  &emsp; gaedmjdfmmahhbjefcbgaolhhanlaolb  &emsp; Authy  &emsp; oeljdldpnmdbchonielidgobddffflal  &emsp; EOS Authenticator  &emsp; ilgcnhelpchnceeipipijaljkblbcobl  &emsp; GAuth Authenticator  &emsp; imloifkgjagghnncjkhggdhalmcnfklk  &emsp; Trezor Password Manager  &emsp; %s\\%s\\Local Extension Settings\\%s  &emsp; %s\\CURRENT  &emsp; %s\\%s\\Sync Extension Settings\\%s  &emsp; %s\\%s\\IndexedDB\\chrome-extension_%s_0.indexeddb.leveldb  &emsp; Plugins\\  &emsp; HARDWARE\\DESCRIPTION\\System\\CentralProcessor\\0  &emsp; ProcessorNameString  &emsp; SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion  &emsp; ProductName  &emsp; x64  &emsp; x86  &emsp; DISPLAY  &emsp; SOFTWARE\\Microsoft\\Cryptography  &emsp; MachineGuid  &emsp; SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall  &emsp; DisplayName  &emsp; DisplayVersion  &emsp; screenshot.jpg  &emsp; ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890  &emsp; /c timeout /t 5 &amp; del /f /q \"%s\" &amp; exit  &emsp; C:\\Windows\\System32\\cmd.exe       Dynamic linking   The adress of GetProcAddress() and LoadLibraryA()  is retrieved by the same method in Dynamic_Linking_1  looping over the exported functions of the kernel32.DLL , then it uses  LoadLibraryA() to Load the specified module into the address space and get a handle that get passed to  GetProcAddress() to retrieve the address of an exported function from the specified dynamic-link library.  Dynamic_Linking_2 is loading the APIs only needed to do some checks if it passes it will load others needed for stealing functionality.         dword_42774 is GetProcAddress() it is called in other function which is Dynamic_Linking_3 that will load other APIs needed for stealing functionality.         We use idapython to rename the global variables with the api name to make reversing easier         import idc  start_Addrs = [0x00415F86,0x00415FC0 ,0x004161A0 ] end_Addrs = [0x00415FB7,0x00416176,0x00417034]  string_list = []  for i in range(len(start_Addrs)):     ea = start_Addrs[i]     end = end_Addrs[i]      while ea &lt;= end:          if (idc.print_insn_mnem(ea) == \"push\"  )and (idc.get_operand_type(ea, 0) == idc.o_imm):             name = idc.get_strlit_contents(idc.get_operand_value(ea, 0)).decode()          if (idc.print_insn_mnem(ea) == \"mov\"  and (idc.get_operand_type(ea, 0) == idc.o_reg)and (idc.get_operand_type(ea, 1) == idc.o_mem)) :             temp_name = idc.get_name(idc.get_operand_value(ea, 1))             if \"Str_\" == temp_name[0:4]:                 name = temp_name[4::]          if (idc.print_insn_mnem(ea) == \"mov\") and (idc.get_operand_type(ea, 0) == idc.o_mem) and (idc.get_operand_type(ea, 1) == idc.o_reg):             global_var = idc.get_operand_value(ea, 0)             idc.set_name(global_var, name, SN_NOWARN)          ea = idc.next_head(ea, end)   Anti-Sandbox   Since a lot of sandboxes hook and bypass Sleep() preventing malware being idle over their execution time. The malware first calls   GetTickCount() function that retrieves the number of milliseconds that have elapsed since the system was started, up to 49.7 days, that is our first timestamp. Then calls the Sleep() to suspend itself for 16 seconds. calling GetTickCount() again gets our second timestamp . The malware checks if at least 12 seconds diffrence between the 2 timestampes . If the function returns flase it means that the Sleep() hasn’t been skipped the malware assumes that it is running in a sandbox and exits immediately.         Anti-CIS   This is one of the easy tricks to check if the malware is not infected users from specific countries.         Mars checks the user language to determine if it’s part of the Commonwealth of Independent States (CIS) countrie it gets the user language ID by using GetUserDefaultLangID and it compares the user language ID to:                  Language ID       Country                       0x43F       Kazakhstan                 0x443       Uzbekistan                 0x82C       Azerbaijan                 0x43Fu       Kazakhstan                 0x419u       Russia                 0x423u       Belarus           If the user language ID matches one of the IDs above, it will exit.   Anti-Emulation   If the malware is executed with the computer name HAL9TH  and the username with JohnDoe  it will exit . This check is done because it is the name given to the Windows Defender Emulator, this technique is used by malware to prevent itself from running in an emulated environment.         Mutex   The malware creates a mutex object using CreateMutexA() to avoid having more than one instance running.  Then calls GetLastError() which gets the last error, and if the error code is equal to 183 (ERROR_ALREADY_EXIST) it means that mutex already exists and an instance of the malware is already running therefore malware exits.         Anti-Debug   The malware create thread that checks BeingDebugged flag which is Special flag in system tables, which dwell in process memory and which an operation system sets, can be used to indicate that the process is being debugged. The states of these flags can be verified either by using specific API functions or examining the system tables in memory.  If the malware is being debugged it exits .  The thread is going to keep running until the malware finishes excution or the thread end the malware excution if its being debugged .                           Expiration check   The Expiration date variable contains the date 26/04/2022 20:00:00.   Mars uses GetSystemTime() to get current system date and time as SYSTEMTIME structe, then calls sscanf() to parse the Expiration date to a SYSTEMTIME structe . SystemTimeToFileTime() take SYSTEMTIME structe as argument then convert it to file time and Expiration date although is converted to file time.   If the current time exceedes the Expiration time, the malware calls ExitProcess() to exit immediately.         Main Functionality                                    Mars generate random string that will be the name of the zip file contains stolen data.   The communications between c2 and the malware is described as:     sends a GET request to the C2 URL on the /RyC66VfSGP.php endpoint to grab its configuration .   fetches all DLLs on the /request endpoint, the libraries are zipped   Stolen data are posted to the C2 on the same URL used in step 1.   Dlls retrieved:                  DLL Name       Description       Save path                       sqlite3.dll       Enables SQLite related operations       none (mars doesnt write it on disk, parsed from memory)                 freebl3.dll       Library for the NSS (Gecko-based browsers)       C:\\ProgramData\\freebl3.dll                 mozglue.dll       Mozilla Browser Library       C:\\ProgramData\\mozglue.dll                 msvcp140.dll       Visual C++ Runtime 2015       C:\\ProgramData\\msvcp140.dll                 nss3.dll       Network System Services Library (Gecko-based browsers)       C:\\ProgramData\\nss3.dll                 softokn3.dll       Mozilla Browser Library       C:\\ProgramData\\softokn3.dll                 vcruntime140.dll       Visual C++ Runtime 2015       C:\\ProgramData\\vcruntime140.dll           Another diffrence from the last version is that sqlite3 isnt written on disk, it just get parsed and passed to another function to get handle to it and start loading needed function , the other dll are written .        Since the C2 was down i got the pcap from Hatching sandbox.              Understanding Configuration Format  configuration is base64 encoded   MXwxfDF8MXwxfDVxRGxQdVZLb1J8RGlzY29yZHwwfCVBUFBEQVRBJVxkaXNjb3JkXExvY2FsIFN0b3JhZ2VcfCp8MXwwfDB8VGVsZWdyYW1 8MHwlQVBQREFUQSVcVGVsZWdyYW0gRGVza3RvcFx0ZGF0YVx8KkQ4NzdGNzgzRDVEM0VGOEMqLCptYXAqLCpjb25maWdzKnwxfDB8MHw=   1|1|1|1|1|5qDlPuVKoR|Discord|0|%APPDATA%\\discord\\Local Storage\\ |*|1|0|0|Telegram|0|%APPDATA%\\Telegram Desktop\\tdata\\ |*D877F783D5D3EF8C*,*map*,*configs*|1|0|0|   import base64 config = base64.b64decode(\"MXwxfDF8MXwxfDVxRGxQdVZLb1J8RGlzY29yZHwwfCVBUFBEQVRBJVxkaXNjb3JkXExvY2FsIFN0b3JhZ2VcfCp8MXwwfDB8VGVsZWdyYW18MHwlQVBQREFUQSVcVGVsZWdyYW0gRGVza3RvcFx0ZGF0YVx8KkQ4NzdGNzgzRDVEM0VGOEMqLCptYXAqLCpjb25maWdzKnwxfDB8MHw=\").decode() config = config.split(\"|\") print(\"First Part : \\n\" ,config[0:6]) print(\"Second Part :\" ) for i in range(6,len(config),7):     print(config[i:i+7])   First Part :   ['1', '1', '1', '1', '1', '5qDlPuVKoR'] Second Part : ['Discord', '0', '%APPDATA%\\\\discord\\\\Local Storage\\\\', '*', '1', '0', '0'] ['Telegram', '0', '%APPDATA%\\\\Telegram Desktop\\tdata\\\\', '*D877F783D5D3EF8C*,*map*,*configs*', '1', '0', '0']      First part                  Config       Meaning                       1       Downloads_history_Flag                 1       Browser_History_Flag                 1       Autofill_Flag                 1       ScreenShoot_Flag                 1       Self_Deletion_Flag                 5qDlPuVKoR       Explorer Credentials FileName              Second part                  Config       Meaning                       Discord       name for the zip file – will contain all the stolen files that related to the current task.so the name for the zip will be name.zip.                 0       maybe max size (no indecation of use)                 %APPDATA%\\discord\\Local Storage\\       An environment variable name and folder name – a starting point for the recursive Grabber.                 *       A regex list – contains multiply parameters that are separated by “,” each one of them is a regex that represents a file type.                 1       is_Recursive                 0       Write to zip enabled if 0                 0       Exclusion List           Grabber   lets dig into Config_Grabber function to see how you it works   after receiving the config we can see the it has a lot of | so it split the config with | delimiter and loop through the splited config. the first part enables/disable some of the stealer functionality then it starts in part 2 which start grapping files wanted.   as example     [‘Discord’, ‘0’, ‘%APPDATA%\\discord\\Local Storage\\’, ‘*’, ‘1’, ‘0’, ‘0’]    it start recurseively grabbing all files in discord\\\\Local Storage\\\\  under %APPDATA% and put them in discord.zip                                                            If there is more than one regex as in     [‘Telegram’, ‘0’, ‘%APPDATA%\\Telegram Desktop\\tdata\\’, ‘D877F783D5D3EF8C,map,configs’, ‘1’, ‘0’, ‘0’]    it loops through them and call Recursive_Grabber with each regex .         Browsers  Mars steals credentials from browsers by static paths. It has four different methods to steal data from different types of browses, like Gecko-based browsers, Opera, Internet Explorer and Chromium-based browsers.                           Data Extraction   All the extraction functions have the same scheme:     The malware saves the addresses of the functions from sqlite3.dll            sqlite3_open       sqlite3_prepare_v2       sqlite3_step       sqlite3_column_bytes       sqlite3_column_blob       sqlite3_column_text       sqlite3_column_finalize       sqlite3_column_close           It generates a random string (length of 8 characters) and copies the DB file to a temp folder named like the random string – all the extractions methods will be on the copied DB. In order to extract the data from the DB, the malware has to create the SQL query and query the DB using sqlite3.dll functions.   The malware opens the DB by using sqlite3_open and passes the DB path.   It calls to sqlite3_prepare_v2, the function gets a handle to DB and the SQL query and returns a statement handle.   By using sqlite3_column_bytes/sqlite3_column_blob/sqlite3_column_text, the malware can get the results from the queries   The Credentials in Chromium-based browsers DB are encrypted by DPAPI and, therefore, the malware uses the function CryptUnprotectData to decrypt the Credentials.   Mars steals information from the Windows Vault, which is the default storage vault for the credential manager information. This is done through the use of Vaultcli.dll, which encapsulates the necessary functions to access the Vault. The malware loops through its items using:      VaultEnumerateVaults   VaultOpenVault   VaultEnumerateItems   VaultGetItem   VaultFree   Targeted DB Files                  File Name       Affected Software                       History       Chromium-based browsers                 Login Data       Chromium-based browsers                 Cookies       Chromium-based browsers                 Web Data       Chromium-based browsers                 formhistory.sqlite       Gecko-based browsers                 cookies.sqlite       Gecko-based browsers                 signongs.sqlite       Gecko-based browsers                 places.sqlite       Gecko-based browsers           Queries Used                  Query       Target Browser       Enabled                       SELECT target_path, tab_url from downloads       chromium , opera       by default this feature is disabled,  enabled if Downloads_history_Flag is set to 1                 SELECT name, value FROM autofill       chromium , opera       by default this feature is disabled, enabled if Autofill_Flag is set to 1                 SELECT url FROM urls       chromium , opera       by default this feature is disabled,enabled if Browser_History_Flag is set to 1                 SELECT action_url, username_value, password_value FROM logins       chromium , opera       enabled by default                 SELECT HOST_KEY, is_httponly, path, is_secure, (expires_utc/1000000)-11644480800, name, encrypted_value from cookies       chromium , opera       enabled by default                 SELECT name_on_card, expiration_month, expiration_year, card_number_encrypted FROM credit_cards       chromium , opera       enabled by default                 SELECT host, isHttpOnly, path, isSecure, expiry, name, value FROM moz_cookies       gecko       enabled by default                 SELECT url FROM moz_places       gecko       by default this feature is disabled,enabled if Browser_History_Flag is set to 1                 SELECT fieldname, value FROM moz_formhistory       gecko       enabled by default           Cryptocurrency Wallets via browser extensions   Mars appears to also target additional Chrome-based browser extensions related to two-factor authentication (2FA) .         Mars steal files from 3 folders :      \\Local Extension Settings\\Extension ID from Google Store   \\Sync Extension Settings\\ Extension ID from Google Store   \\IndexedDB\\Domain Name.indexeddb.leveldb   as example if the victim uses Google Chrome with a crypto browser wallet extension, the extension files will be stored in:   C:\\Users\\Username\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Local Extension Settings\\Extension ID from Google Store C:\\Users\\Username\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Sync Extension Settings\\ Extension ID from Google Store C:\\Users\\Username\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\IndexedDB\\Domain Name.indexeddb.leveldb                  Type       Extension name       Extension id                       Crypto       TronLink       ibnejdfjmmkpcnlpebklmnkoeoihofec                 Crypto       MetaMask       nkbihfbeogaeaoehlefnkodbefgpgknn                 Crypto       Binance Chain Wallet       fhbohimaelbohpjbbldcngcnapndodjp                 Crypto       Yoroi       ffnbelfdoeiohenkjibnmadjiehjhajb                 Crypto       Nifty Wallet       jbdaocneiiinmjbjlgalhcelgbejmnid                 Crypto       Math Wallet       afbcbjpbpfadlkmhmclhkeeodmamcflc                 Crypto       Coinbase Wallet       hnfanknocfeofbddgcijnmhnfnkdnaad                 Crypto       Guarda       hpglfhgfnhbgpjdenjgmdgoeiappafln                 Crypto       EQUAL Wallet       blnieiiffboillknjnepogjhkgnoapac                 Crypto       Jaxx Liberty       cjelfplplebdjjenllpjcblmjkfcffne                 Crypto       BitApp Wallet       fihkakfobkmkjojpchpfgcmhfjnmnfpi                 Crypto       iWallet       kncchdigobghenbbaddojjnnaogfppfj                 Crypto       Wombat       amkmjjmmflddogmhpjloimipbofnfjih                 Crypto       MEW CX       nlbmnnijcnlegkjjpcfjclmcfggfefdm                 Crypto       GuildWallet       nanjmdknhkinifnkgdcggcfnhdaammmj                 Crypto       Saturn Wallet       nkddgncdjgjfcddamfgcmfnlhccnimig                 Crypto       Ronin Wallet       fnjhmkhhmkbjkkabndcnnogagogbneec                 Crypto       NeoLine       cphhlgmgameodnhkjdmkpanlelnlohao                 Crypto       Clover Wallet       nhnkbkgjikgcigadomkphalanndcapjk                 Crypto       Liquality Wallet       kpfopkelmapcoipemfendmdcghnegimn                 Crypto       Terra Station       aiifbnbfobpmeekipheeijimdpnlpgpp                 Crypto       Keplr       dmkamcknogkgcdfhhbddcghachkejeap                 Crypto       Sollet       fhmfendgdocmcbmfikdcogofphimnkno                 Crypto       Auro Wallet       cnmamaachppnkjgnildpdmkaakejnhae                 Crypto       Polymesh Wallet       jojhfeoedkpkglbfimdfabpdfjaoolaf                 Crypto       ICONex       flpiciilemghbmfalicajoolhkkenfel                 Crypto       Nabox Wallet       nknhiehlklippafakaeklbeglecifhad                 Crypto       KHC       hcflpincpppdclinealmandijcmnkbgn                 Crypto       Temple       ookjlbkiijinhpmnjffcofjonbfbgaoc                 Crypto       TezBox       mnfifefkajgofkcjkemidiaecocnkjeh                 Crypto       Cyano Wallet       dkdedlpgdmmkkfjabffeganieamfklkm                 Crypto       Byone       nlgbhdfgdhgbiamfdfmbikcdghidoadd                 Crypto       OneKey       infeboajgfhgbjpjbeppbkgnabfdkdaf                 Crypto       LeafWallet       cihmoadaighcejopammfbmddcmdekcje                 Crypto       DAppPlay       lodccjjbdhfakaekdiahmedfbieldgik                 Crypto       BitClip       ijmpgkjfkbfhoebgogflfebnmejmfbml                 Crypto       Steem Keychain       lkcjlnjfpbikmcmbachjpdbijejflpcm                 Crypto       Nash Extension       onofpnbbkehpmmoabgpcpmigafmmnjhl                 Crypto       Hycon Lite Client       bcopgchhojmggmffilplmbdicgaihlkp                 Crypto       ZilPay       klnaejjgbibmhlephnhpmaofohgkpgkd                 Crypto       Coin98 Wallet       aeachknmefphepccionboohckonoeemg                 2FA       Authenticator       bhghoamapcdpbohphigoooaddinpkbai                 2FA       Authy       gaedmjdfmmahhbjefcbgaolhhanlaolb                 2FA       EOS Authenticator       oeljdldpnmdbchonielidgobddffflal                 2FA       GAuth Authenticator       ilgcnhelpchnceeipipijaljkblbcobl                 2FA       Trezor Password Manager       imloifkgjagghnncjkhggdhalmcnfklk           Crypto Wallets   Mars does not just stop at targeting crypto currencies via browser extensions. Many people prefer not to use third-party applications and services to store their digital currency. Mars will go through various folders looking for specific files related to cryptocurrency.   The first paramter detmerines the path if 0 then it’s under %appdata%  if 1 it’s under %localappdata% then it search for other wallets with regex *wallet*.dat under %appdata%         Mars have dedicated functionality to target the following crypto wallets:                  Wallet name       Wallet folder       Regex                       Ethereum       %appdata%\\Ethereum\\       keystore                 Electrum       %appdata%\\Electrum\\wallets\\       .                 Electrum LTC       %appdata%\\Electrum-LTC\\wallets\\       .                 Exodus       %appdata%\\Exodus\\       exodus.conf.json, window-state.json, \\Exodus\\exodus.wallet\\, passphrase.json, seed.seco, info.seco                 Electron Cash       %appdata%\\ElectronCash\\wallets\\       default_wallet                 MultiDoge       %appdata%\\MultiDoge\\       multidoge.wallet                 Jaxx       %appdata%\\jaxx\\Local Storage\\       file__0.localstorage                 Atomic       %appdata%\\atomic\\Local Storage\\leveldb\\       000003.log, CURRENT, LOCK, LOG, MANIFEST.000001, 0000*                 Binance       %appdata%\\Binance\\       app-store.json                 Coinomi       %localappdata%\\Coinomi\\Coinomi\\wallets\\       *.wallet, *.config                  Other wallets       %appdata%       *wallet*.dat           System info  The malware grabs system info and store it in system.txt file     IP and country   Working path to EXE file   Local time and time zone   Language system   Language keyboard layout   Notebook or desktop   Processor model   Computer name   User name   Domain computer name   Machine ID   GUID   Installed software and their versions   Mars althouge takes screenshot and then add all stolen files to a zip file which it will exfiltrate back to the c2 and get loader config.   Loader   Malware gets loader config as a response after exfiltrating data. This config looks like  download_URL|An environment variable name and folder name |startup_parameter| .   After pasring the config Mars calls download_file() function with the url and a path which the file will be saved in . Then calls ShellExecuteExA() to execute executable with give paramters retrieved from the config.              Self Deletion   Malware gets the path to itself by using GetModuleFileName() and calls ShellExecuteExA() which executes the following command   \"C:/Windows/System32/cmd.exe\" /c timeout /t 5 &amp; del /f / path_To_file &amp; exit   After 5 seconds the executable will be deleted.         Generalized  idapython Script using patterns   import idautils , idc, idaapi, ida_search, ida_bytes, ida_auto import string    seg_mapping = {idaapi.getseg(x).name: (idaapi.getseg(x).start_ea, idaapi.getseg(x).end_ea) for x in                    idautils.Segments()} start = seg_mapping[0x1][0] end = seg_mapping[0x1][1]      def sanitize_string(name):     return \"\".join([c for c in name if c in string.ascii_letters])[:20].capitalize()  def Xor(key, data, length):     res = \"\"     for i in range(length):         res += chr(key[i] ^ data[i])     return res  def getData (addr):     key_addr = idc.prev_head(addr)     data_addr = idc.prev_head(key_addr)     key_length_addr = idc.prev_head(data_addr)     length = idc.get_operand_value(key_length_addr, 0)     key = idc.get_bytes(idc.get_operand_value(key_addr,0),length)     data =  idc.get_bytes(idc.get_operand_value(data_addr,0),length)     return  key , data ,length   def rename_APIs(ea,end):          func_addr = ea     for i in range(20):         if (idc.print_insn_mnem(ea) == \"push\"  )and (idc.get_operand_type(ea, 0) == idc.o_imm):             name = idc.get_strlit_contents(idc.get_operand_value(ea, 0)).decode()             break                  if (idc.print_insn_mnem(ea) == \"mov\"  and (idc.get_operand_type(ea, 0) == idc.o_reg)and (idc.get_operand_type(ea, 1) == idc.o_mem)) :             temp_name = idc.get_name(idc.get_operand_value(ea, 1))             if \"Str_\" == temp_name[0:4]:                 name = temp_name[4::]                 break                 ea =  idc.prev_head(ea)              ea = func_addr          for i in range(20):         if (idc.print_insn_mnem(ea) == \"mov\") and (idc.get_operand_type(ea, 0) == idc.o_mem) and (idc.get_operand_type(ea, 1) == idc.o_reg):                 global_var = idc.get_operand_value(ea, 0)                 idc.set_name(global_var, name, SN_NOWARN)                 return name                  ea = idc.next_head(ea, end)   def API_resolve(start,end):     Loadlibrarya_addr = 0x0     GetProcAddress_pattern = \"8B 55 ?? 52 8B 45 ?? 8B 4D ??  8B 55 ?? 03 14 ?? 52 E8 ?? ?? ?? ?? 83 C4 ??  85 C0 75 ??\"     GetProcAddress_addr = ida_search.find_binary(start, end, GetProcAddress_pattern, 16, idc.SEARCH_DOWN)     GetProcAddress_addr = idaapi.get_func(GetProcAddress_addr).start_ea     print('[*] Traget fucntion found at {}'.format(hex(GetProcAddress_addr)))      for ref in idautils.XrefsTo(GetProcAddress_addr):         addr = ref.frm         x = rename_APIs(addr, end)         if \"Loadlibrarya\" in x:                 Loadlibrarya_addr = idc.get_operand_value(idc.next_head(idc.next_head(addr, end), end), 0)       new_GetProcAddress_addr = idc.get_operand_value(idc.next_head(idc.next_head(addr, end), end), 0)          for ref in idautils.XrefsTo(new_GetProcAddress_addr):         addr = ref.frm         rename_APIs(addr, end)      for ref in idautils.XrefsTo(Loadlibrarya_addr):         addr = ref.frm         rename_APIs(addr, end)           def Strings_resolve(start,end):     xor_pattern = \"8b 4d ?? 03 4d ?? 0f be 19 8b 55 ?? 52 e8 ?? ?? ?? ?? 83 c4 ?? 8b c8 8b 45 ?? 33 d2 f7 f1 8b 45 ?? 0f be 0c 10 33 d9 8b 55 ?? 03 55 ?? 88 1a eb be\"     xor_fun_addr = ida_search.find_binary(start, end, xor_pattern, 16, idc.SEARCH_DOWN)     xor_fun_addr = idaapi.get_func(xor_fun_addr).start_ea     print('[*] Traget fucntion found at {}'.format(hex(xor_fun_addr)))      for ref in idautils.XrefsTo(xor_fun_addr):         addr = ref.frm         key, data, length = getData(addr)         decrypt_string = Xor(key, data, length)         idc.set_cmt(addr, decrypt_string, 1)         ea = idc.next_head(idc.next_head(addr, end),end)         global_var = idc.get_operand_value(ea, 0)         idc.set_name(global_var, \"Str_\" + sanitize_string(decrypt_string), SN_NOWARN)          def Anit_Reverse():     ea = 0     while True:         ea = min(ida_search.find_binary(ea, idc.BADADDR, \"74 ? 75 ?\", 16, idc.SEARCH_NEXT | idc.SEARCH_DOWN),                  # JZ / JNZ                  ida_search.find_binary(ea, idc.BADADDR, \"75 ? 74 ?\", 16,                                         idc.SEARCH_NEXT | idc.SEARCH_DOWN))  # JNZ / JZ         if ea == idc.BADADDR:             break         idc.patch_byte(ea, 0xEB)         idc.patch_byte(ea + 2, 0x90)         idc.patch_byte(ea + 3, 0x90)         idc.patch_byte(ea + 4, 0x90)    def main():     Anit_Reverse()     Strings_resolve(start,end)     API_resolve(start,end)  main()   for more Idapython scripts check my repo .   IOCs      Hashes:            md5 : 880924E5583978C615DD03FF89648093       sha1 : EF759F6ECA63D6B05A7B6E395DF3571C9703278B       sha256 : 4bcff4386ce8fadce358ef0dbe90f8d5aa7b4c7aec93fca2e605ca2cbc52218b       imphash : 4E06C011D59529BFF8E1F1C88254B928       ssdeep : 3072:U/E8k9fjpIg+zNch12KbAwSaSMtmSu4/bVBt4b8EG:U/E8k9bwz6/tJc/4xM8EG           Mutex : 92550737836278980100   Files:            C:\\ProgramData\\freebl3.dll       C:\\ProgramData\\mozglue.dll       C:\\ProgramData\\msvcp140.dll       C:\\ProgramData\\nss3.dll       C:\\ProgramData\\softokn3.dll       C:\\ProgramData\\vcruntime140.dll           C2 Server : 194.87.218.39   C2 Domains:            http://194[.]87[.]218[.]39/request       http://194[.]87[.]218[.]39/RyC66VfSGP[.]php           YARA   rule Mars_Stealer: Mars Stealer {     meta:         Author = \"X__Junior\"         Description = \"Mars Stealer v8 Detection\"      strings:         $xor ={8b 4d ?? 03 4d ?? 0f be 19 8b 55 ?? 52 e8 ?? ?? ?? ?? 83 c4 ?? 8b c8 8b 45 ?? 33 d2 f7 f1 8b 45 ?? 0f be 0c 10 33 d9 8b 55 ?? 03 55 ?? 88 1a eb be}         $debug = {64 A1 30 00 00 00 80 78 02 00} \t$thread_func = {B8 01 00 00 00   85 ??  74 ?? E8 ?? ?? ?? ?? 85 ?? 74 ?? 6A 00 FF ?? ?? ?? ?? ?? 6A ?? FF ?? ?? ?? ?? ?? EB ??}          $api1 = \"LocalAlloc\" ascii         $api2 = \"VirtualProtect\" ascii         $api3 = \"SetFileTime\" ascii         $api4 = \"LocalFileTimeToFileTime\" ascii         $api5 = \"HeapFree\" ascii         $api6 = \"VirtualFree\" ascii         $api7 = \"VirtualAlloc\" ascii          $s1 = \"DPAPI\" ascii         $s2 = \"memset\" ascii         $s3 = \"msvcrt.dll\" ascii         $s4 = \"_mbsnbcpy\" ascii         $s5 = \"_mbsstr\" ascii      condition:         uint16(0) == 0x5A4D and 2 of($api*) and 3 of($s*)  and $debug  and $xor  and $thread_func  }  Conclusion   The last sample of mars i saw came packed with custom packer , easy to unpack with x32dbg by just setting a breakpoint on VirtualAlloc() , nothing else was changed except for the C2 .   References     Great analysis of the previous version https://3xp0rt.com/posts/mars-stealer   https://lp.cyberark.com/rs/316-CZP-275/images/CyberArk-Labs-Racoon-Malware-wp.pdf  ","categories": ["Malware Analysis"],
        "tags": ["Stealer"],
        "url": "/malware%20analysis/MarsStealer/",
        "teaser": "/assets/malware-analysis/Mars/logo1.gif"
      }]
